{"version":3,"sources":["TestComponent.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["client","GraphQLClient","headers","Authorization","TestComponent","props","state","user","request","then","data","setState","allUsers","console","log","this","name","age","React","Component","App","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"kSAIMA,EAAS,I,KAAIC,eAAc,6DAA8D,CAC7FC,QAAS,CACPC,cAAe,4B,IA8DJC,E,YA5Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACTC,KAAM,IAHO,E,iFAOE,IAAD,OAnBbP,EAAOQ,QAAP,2EAoBKC,MAAK,SAAAC,GACX,EAAKC,SAAS,CAACJ,KAAMG,EAAKE,SAAS,KACnCC,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,EAAKR,MAAMC,W,+BAwB3B,OACI,6BACN,oCAAUQ,KAAKT,MAAMC,KAAKS,MAChB,mCAASD,KAAKT,MAAMC,KAAKU,U,GAvCTC,IAAMC,WCLnBC,MAZf,WAEE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.54680b61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { GraphQLClient } from 'graphql-request'\r\n\r\nconst client = new GraphQLClient('https://api.graph.cool/simple/v1/ck51lp5tn12ei0183w8x46drz', {\r\n  headers: {\r\n    Authorization: 'Bearer YOUR_AUTH_TOKEN',\r\n  },\r\n});\r\n\r\n\r\nfunction getItem() {\r\n  return client.request(`\r\n    {\r\n      allUsers{\r\n        name\r\n        age\r\n      }\r\n    }\r\n  `)\r\n}\r\n\r\n\r\nclass TestComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        user: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    getItem().then(data => { \r\n        this.setState({user: data.allUsers[0]});\r\n        console.log(data)\r\n        console.log(this.state.user);\r\n    });\r\n        \r\n  }\r\n\r\n  /*renderName() {\r\n    if(this.state.users == null) {\r\n        return (\"none\");\r\n    }\r\n    else if(this.state.users[0] != null) {\r\n        return this.state.users[0].name\r\n    }\r\n    else {\r\n        return (\"some\");\r\n    }\r\n  }*/\r\n\r\n  render() {\r\n\r\n    /*console.log(this.state.users[0]);\r\n    if(this.state.users[0] != null) {\r\n        console.log(this.state.users[0].name);\r\n    }*/\r\n\r\n    return (\r\n        <div>\r\n  <p>User: {this.state.user.name}</p>\r\n            <p>Age: {this.state.user.age}</p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TestComponent from './TestComponent'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <TestComponent></TestComponent>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}